define("/data/maps/test.js", [], function() {
    return {
        height: 12,
        layers: [ {
            data
, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 ],
            height: 12,
            name: "background",
            opacity: 1,
            type: "tilelayer",
            visible: !0,
            width: 24,
            x: 0,
            y: 0
        }, {
            data: [ 15, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 15, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 15, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 17, 7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 0, 0, 17, 7, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 15, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 15 ],
            height: 12,
            name: "floor",
            opacity: 1,
            type: "tilelayer",
            visible: !0,
            width: 24,
            x: 0,
            y: 0
        }, {
            data: [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 10, 11, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 10, 11, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 11, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 11, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 11, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 10, 11, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
            height: 12,
            name: "foreground",
            opacity: 1,
            type: "tilelayer",
            visible: !0,
            width: 24,
            x: 0,
            y: 0
        }, {
            data: [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 23, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
            height: 12,
            name: "event",
            opacity: .649999976158142,
            type: "tilelayer",
            visible: !0,
            width: 24,
            x: 0,
            y: 0
        } ],
        orientation: "orthogonal",
        properties: {
            height: "12",
            name: "test",
            width: "24"
        },
        tileheight: 32,
        tilesets: [ {
            firstgid
: 1,
            image: "/images/tiles.png",
            imageheight: 192,
            imagewidth: 192,
            margin: 0,
            name: "tiles",
            properties: {},
            spacing: 0,
            tileheight: 32,
            tileproperties: {
                "0": {
                    group: "wall",
                    name: "wall_left",
                    passable: "false",
                    x: "0",
                    y: "0"
                },
                "1": {
                    group: "wall",
                    name: "wall_floor",
                    passable: "false",
                    x: "1",
                    y: "0"
                },
                "10": {
                    group: "ladder",
                    name: "ladder_mid",
                    passable: "true",
                    x: "4",
                    y: "1"
                },
                "11": {
                    group: "empty",
                    name: "ladder_right",
                    
passable: "true",
                    x: "5",
                    y: "1"
                },
                "12": {
                    group: "wall",
                    name: "wall_bottom_end",
                    passable: "false",
                    x: "0",
                    y: "2"
                },
                "13": {
                    group: "background",
                    name: "background",
                    passable: "true",
                    x: "1",
                    y: "2"
                },
                "14": {
                    group: "wall",
                    name: "wall",
                    passable: "false",
                    x: "2",
                    y: "2"
                },
                "15": {
                    group: "wall",
                    name: "wall_floor_left",
                    passable: "false",
                    x: "3",
                    y: "2"
                },
                "16": {
                    group: "wall"
,
                    name: "wall_left_end",
                    passable: "false",
                    x: "4",
                    y: "2"
                },
                "2": {
                    group: "wall",
                    name: "wall_right",
                    passable: "false",
                    x: "2",
                    y: "0"
                },
                "20": {
                    event: "ladder"
                },
                "21": {
                    event: "door"
                },
                "22": {
                    event: "doorA"
                },
                "23": {
                    group: "door",
                    name: "background_door",
                    passable: "true",
                    x: "5",
                    y: "3"
                },
                "3": {
                    group: "door",
                    name: "door_base",
                    passable: "false",
                    x: "3",
                    
y: "0"
                },
                "4": {
                    group: "door",
                    name: "door_top",
                    passable: "false",
                    x: "4",
                    y: "0"
                },
                "5": {
                    group: "door",
                    name: "door_mid",
                    passable: "false",
                    x: "5",
                    y: "0"
                },
                "6": {
                    group: "wall",
                    name: "wall_floor_roof",
                    passable: "false",
                    x: "0",
                    y: "1"
                },
                "7": {
                    group: "wall",
                    name: "wall_right_left",
                    passable: "false",
                    x: "1",
                    y: "1"
                },
                "8": {
                    group: "wall",
                    name: "wall_roof",
                    passable
: "false",
                    x: "2",
                    y: "1"
                },
                "9": {
                    group: "empty",
                    name: "ladder_left",
                    passable: "true",
                    x: "3",
                    y: "1"
                }
            },
            tilewidth: 32,
            transparentcolor: "#ffffff"
        } ],
        tilewidth: 32,
        version: 1,
        width: 24
    };
}), define("/data/maps/moarmaps.js", [], function() {
    return {
        height: 25,
        layers: [ {
            data: [ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14




, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 ],
            height: 25,
            name: "background",
            opacity: 1,
            type: "tilelayer",
            visible: !0,
            width: 50,
            x: 0,
            y: 0
        }, {
            data: [ 15, 9, 9, 9, 9, 15, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 15, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 15, 0, 0, 17, 15, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 3, 1, 0, 17, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 15, 0, 0, 0, 0, 15, 15, 7, 7, 7, 15, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3
, 15, 7, 7, 7, 7, 15, 0, 15, 0, 17, 0, 17, 7, 0, 3, 7, 7, 7, 7, 7, 7, 7, 2, 7, 7, 7, 2, 7, 7, 7, 7, 7, 7, 7, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 13, 0, 0, 17, 2, 7, 15, 7, 0, 17, 2, 15, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 13, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 16, 7, 7, 7, 7, 7, 15, 1, 0, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 17, 7, 7, 7, 7, 9, 0, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 3, 7, 7, 7, 9, 7, 0, 0, 17, 1, 0, 17, 7, 7, 7, 7, 7, 9, 7, 7, 7, 9, 7, 7, 0, 17, 7, 7, 7, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 15, 7, 7, 7, 7, 7, 7, 7, 7, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 15, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 16, 7, 7, 7, 7, 7, 7, 7, 7, 15, 7, 7, 7, 7, 0, 17, 7, 7, 15, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 3, 15, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 7, 7, 7, 7, 1, 0, 0, 0, 0
, 0, 0, 0, 0, 3, 7, 7, 7, 2, 7, 7, 7, 0, 3, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 15, 1, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 15, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 15, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 15 ],
            height: 25,
            name: "floor",
            opacity: 1,
            type: "tilelayer",
            visible: !0,
            width: 50,
            x: 0,
            y: 0
        }, {
            data: [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 11, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 11, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 11, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 11, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 11, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 11, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 11, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 11, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 11, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 11, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 11, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 11, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 11, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 11, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 11, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 11, 12, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 10, 11, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 11, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 11, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 11, 12, 0, 0, 0, 0, 0, 0, 24, 0, 0, 10, 11, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 11, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 11, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
            height: 25,
            name: "foreground",
            opacity: 1,
            type: "tilelayer",
            visible: !0,
            width: 50,
            x: 0,
            y: 0
        }, {
            data: [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 22, 0, 21, 0, 22, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 22, 0, 21, 0, 22, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 21, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
            height: 25,
            name: "event",
            opacity: .699999988079071,
            type: "tilelayer",
            visible: !0,
            width: 50,
            x: 0,
            y: 0
        } ],
        orientation: "orthogonal",
        properties: {},
        tileheight: 32,
        tilesets: [ {
            firstgid: 1,
            image: "../../images/tiles.png"
,
            imageheight: 192,
            imagewidth: 192,
            margin: 0,
            name: "tiles",
            properties: {},
            spacing: 0,
            tileheight: 32,
            tileproperties: {
                "0": {
                    group: "wall",
                    name: "wall_left",
                    passable: "false",
                    x: "0",
                    y: "0"
                },
                "1": {
                    group: "wall",
                    name: "wall_floor",
                    passable: "false",
                    x: "1",
                    y: "0"
                },
                "10": {
                    group: "ladder",
                    name: "ladder_mid",
                    passable: "true",
                    x: "4",
                    y: "1"
                },
                "11": {
                    group: "empty",
                    name: "ladder_right",
                    passable: "true",
                    
x: "5",
                    y: "1"
                },
                "12": {
                    group: "wall",
                    name: "wall_bottom_end",
                    passable: "false",
                    x: "0",
                    y: "2"
                },
                "13": {
                    group: "background",
                    name: "background",
                    passable: "true",
                    x: "1",
                    y: "2"
                },
                "14": {
                    group: "wall",
                    name: "wall",
                    passable: "false",
                    x: "2",
                    y: "2"
                },
                "15": {
                    group: "wall",
                    name: "wall_floor_left",
                    passable: "false",
                    x: "3",
                    y: "2"
                },
                "16": {
                    group: "wall",
                    name: "wall_left_end"
,
                    passable: "false",
                    x: "4",
                    y: "2"
                },
                "2": {
                    group: "wall",
                    name: "wall_right",
                    passable: "false",
                    x: "2",
                    y: "0"
                },
                "20": {
                    event: "ladder"
                },
                "21": {
                    event: "door"
                },
                "22": {
                    event: "doorA"
                },
                "23": {
                    group: "door",
                    name: "background_door",
                    passable: "true",
                    x: "5",
                    y: "3"
                },
                "3": {
                    group: "door",
                    name: "door_base",
                    passable: "false",
                    x: "3",
                    y: "0"
                },
                "4"
: {
                    group: "door",
                    name: "door_top",
                    passable: "false",
                    x: "4",
                    y: "0"
                },
                "5": {
                    group: "door",
                    name: "door_mid",
                    passable: "false",
                    x: "5",
                    y: "0"
                },
                "6": {
                    group: "wall",
                    name: "wall_floor_roof",
                    passable: "false",
                    x: "0",
                    y: "1"
                },
                "7": {
                    group: "wall",
                    name: "wall_right_left",
                    passable: "false",
                    x: "1",
                    y: "1"
                },
                "8": {
                    group: "wall",
                    name: "wall_roof",
                    passable: "false",
                    x: "2",
                    
y: "1"
                },
                "9": {
                    group: "empty",
                    name: "ladder_left",
                    passable: "true",
                    x: "3",
                    y: "1"
                }
            },
            tilewidth: 32,
            transparentcolor: "#ffffff"
        } ],
        tilewidth: 32,
        version: 1,
        width: 50
    };
}), define("entity", [ "animation" ], function(animation) {
    return {
        cloneObject: function(object, isArray) {
            if (isArray) {
                var newObject = [];
                for (var i = 0; i < object.length; i++) typeof object[i] == "object" ? newObject.push(this.cloneObject(object[i], Array.isArray(object[i]))) : newObject.push(object[i]);
            } else {
                var newObject = {};
                for (var attr in object) typeof object[attr] == "object" ? newObject[attr] = this.cloneObject(object[attr], Array.isArray(object[attr])) : newObject[attr] = 
object[attr];
            }
            return newObject;
        },
        inGame: [],
        master: {
            characters: {},
            tiles: {},
            objects: {},
            tools: {},
            environment: {}
        },
        make: function(master, spriteSheetPath, type, animationJSON, dataJSON, eventJSON) {
            return master[type] = master[type] || {}, master[type][dataJSON.id] = {
                spriteSheet: spriteSheetPath,
                image: null,
                counter: 0,
                animations: this.cloneObject(animationJSON),
                data: this.cloneObject(dataJSON),
                on: this.cloneObject(eventJSON)
            }, master[type][dataJSON.id];
        },
        isMoving: function(entity) {
            if (entity.data.event) for (var attr in entity.data.event) if (entity.data.event[attr]) return console.log(attr), !0;
            return !1;
        },
        stop: function(entity) {
            if (entity.data.event
) {
                for (var attr in entity.data.event) entity.data.event[attr] = !1;
                return !0;
            }
            return !1;
        },
        clone: function(entity) {
            var clone = this.cloneObject(entity), image = new Image;
            return image.src = entity.spriteSheet, clone.image = image, clone.data.uniqueId = Math.floor(Math.random() * 1e6), clone.data.frameData = clone.animations[clone.data.action].frames[0], clone;
        },
        spawn: function(entity, attributes, renderList) {
            var object = this.clone(entity);
            for (var attr in attributes) object.data[attr] = attributes[attr];
            return this.inGame.push(object), renderList.push(object), !1;
        },
        collide: function(entity) {
            var result = [], sx = entity.data.x - entity.data.frameData.cpx, sy = entity.data.y - entity.data.frameData.cpy, ex = sx + entity.data.w, ey = sy + entity.data.h, mx = (sx + ex) / 2, my = (sy + ey) / 2;
            
for (var i = 0; i < animation.renderList.length; i++) {
                var target = animation.renderList[i], tsx = target.data.x, tsy = target.data.y, tex = tsx + target.data.w, tey = tsy + target.data.h, tmx = (tsx + tex) / 2, tmy = (tsy + tey) / 2;
                animation.context.fillRect(sx, sy, 32, 32), animation.context.fillRect(tsx, tsy, target.data.w, target.data.h), sx - (entity.data.direction.left === !0) <= tex && sy <= tey && ey >= tsy && sx - (entity.data.direction.left === !0) >= tsx && result.push({
                    direction: "left",
                    target: target
                }), ex + (entity.data.direction.right === !0) >= tsx && sy <= tey && ey >= tsy && ex + (entity.data.direction.right === !0) <= tex && result.push({
                    direction: "right",
                    target: target
                }), sy - (entity.data.event.jump === !0) <= tey && sx <= tex && ex >= tsx && sy - (entity.data.event.jump === !0) >= tsy && result.push({
                    
direction: "top",
                    target: target
                }), ey + (entity.data.event.fall === !0) >= tsy && sx <= tex && ex >= tsx && ey + (entity.data.event.fall === !0) <= tey && result.push({
                    direction: "bottom",
                    target: target
                });
            }
            return result;
        }
    };
}), define("/data/data/world.js", [], function() {
    return {
        id: "world",
        gravity: .1,
        offsetX: 160,
        offsetY: 160,
        minOffset: 224,
        maxOffsetX: 0,
        maxOffsetY: 0
    };
}), define("/data/animations/playertest.js", [], function() {
    return {
        stand: {
            speed: 0,
            frames: [ {
                x: 3,
                y: 14,
                w: 32,
                h: 37,
                cpx: 16,
                cpy: 19
            } ]
        },
        climb: {
            speed: 0,
            frames: [ {
                x: 289,
                y: 10,
                
w: 44,
                h: 52,
                cpx: 22,
                cpy: 26
            } ]
        },
        walk: {
            speed: 0,
            frames: [ {
                x: 48,
                y: 22,
                w: 47,
                h: 24,
                cpx: 16,
                cpy: 19
            } ]
        },
        jump: {
            speed: 0,
            frames: [ {
                x: 119,
                y: 11,
                w: 23,
                h: 41,
                cpx: 16,
                cpy: 20
            } ]
        },
        fall: {
            speed: 0,
            frames: [ {
                x: 168,
                y: 10,
                w: 29,
                h: 49,
                cpx: 16,
                cpy: 24
            } ]
        },
        land: {
            speed: 0,
            frames: [ {
                x: 219,
                y: 6,
                w: 46,
                h: 58,
                cpx: 16,
                cpy: 20
            
} ]
        }
    };
}), define("/data/data/player.js", [], function() {
    return {
        health: 100,
        x: 448,
        y: 320,
        tileX: 14,
        tileY: 10,
        w: 32,
        h: 32,
        id: "player",
        direction: {
            up: !1,
            right: !1,
            down: !1,
            left: !1
        },
        event: {
            jump: !1,
            fall: !0,
            walk: !1,
            dash: !1,
            climb: !1,
            action: !1,
            stop: !1
        },
        lastDirection: "right",
        action: "stand",
        onLand: !1,
        blocked: {
            up: !1,
            down: !1,
            right: !1,
            left: !1
        },
        travel: !1,
        targetDoor: {
            x: 0,
            y: 0
        },
        moving: !1,
        coolDown: 0,
        jumpRate: -3,
        jumpForce: -3,
        fallRate: 0,
        walkSpeed: 1,
        frameData: null,
        isFlipped: !1,
        physics
: {
            checkAgainst: [ "map", "entity", "bullet" ],
            types: [ "player", "entity" ]
        },
        oldFrame: {
            animation: "",
            index: 0
        }
    };
}), define("input", [], function() {
    return {
        keys: {
            up: !1,
            down: !1,
            right: !1,
            left: !1,
            space: !1,
            z: !1,
            x: !1
        },
        listen: function(name, fn) {
            return document.addEventListener(name, fn), !1;
        },
        trigger: function(name, details) {
            var event = new CustomEvent(name, {
                detail: details
            });
            return document.dispatchEvent(event), !1;
        },
        keyDown: function(event, input) {
            return event.keyCode === 39 && (this.keys.right = !0), event.keyCode === 37 && (this.keys.left = !0), event.keyCode === 32 && (this.keys.space = !0), event.keyCode === 38 && (this.keys.up = !0), event.keyCode === 40 && 
(this.keys.down = !0), event.keyCode === 90 && (this.keys.z = !0), event.keyCode === 88 && (this.keys.x = !0), !1;
        },
        keyUp: function(event, input) {
            return event.keyCode === 39 && (this.keys.right = !1), event.keyCode === 37 && (this.keys.left = !1), event.keyCode === 32 && (this.keys.space = !1), event.keyCode === 38 && (this.keys.up = !1), event.keyCode === 40 && (this.keys.down = !1), event.keyCode === 90 && (this.keys.z = !1), event.keyCode === 88 && (this.keys.x = !1), !1;
        }
    };
}), define("/data/events/player.js", [ "animation", "input", "map", "entity" ], function(animation, input, map, entity) {
    return {
        walk: function(target, event) {
            if (this.data.event.stop) return this.data.event.stop = !1, !0;
            if (this.data.event.climb && !this.data.event.fall) return !0;
            input.keys.left || input.keys.right ? (this.data.event.walk = !0, this.data.event.stand = !1) : (this.data.event.walk = !1, this.data.
event.stand = !0);
            if (input.keys.left && input.keys.right) {
                if (this.data.direction.right || this.data.direction.left) this.counter = 0;
            } else this.data.event.walk && (input.keys.right === !0 && this.data.blocked.right === !1 ? (this.data.moving = !0, this.data.x = this.data.x + this.data.walkSpeed) : input.keys.left === !0 && this.data.blocked.left === !1 && (this.data.moving = !0, this.data.x = this.data.x - this.data.walkSpeed));
            return input.keys.right === !1 && this.data.direction.right === !0 && (this.counter = 0), input.keys.left === !1 && this.data.direction.left === !0 && (this.counter = 0), !1;
        },
        moveDoors: function(map) {
            if (this.data.travel) {
                if (this.data.tileX === this.data.targetDoor.x && this.data.tileY === this.data.targetDoor.y) return this.data.travel = !1, !0;
                this.data.tileX < this.data.targetDoor.x && (this.data.x += 16), this.data.tileX > this.data
.targetDoor.x && (this.data.x -= 16), this.data.tileY < this.data.targetDoor.y && (this.data.y += 16), this.data.tileY > this.data.targetDoor.y && (this.data.y -= 16);
            }
            return !1;
        },
        door: function(target, event) {
            this.data.coolDown = 10;
            if (event.door) {
                var target = event.map.matchDoor(event.x, event.y);
                this.data.targetDoor.x = target.x, this.data.targetDoor.y = target.y;
            } else this.data.targetDoor.y = event.y, this.data.direction.left ? this.data.targetDoor.x = event.x - 1 : this.data.direction.right && (this.data.targetDoor.x = event.x + 1);
            return this.data.travel = !0, !1;
        },
        climb: function(target, context, map) {
            var find = function(list, type) {
                if (list) for (var i = 0; i < list.length; i++) {
                    !list[i];
                    if (list[i].event.indexOf(type) > -1) return list[i];
                
}
                return !1;
            }, climbUp = function() {
                return this.data.moving = !0, this.data.fallRate = 0, this.data.jumpRate = this.data.jumpForce, this.data.action = "climb", this.data.event.jump = !1, this.data.event.fall = !1, this.data.y = this.data.y - 1, this.data.onLand = !1, this.counter++, this.data.event.climb = !0, !1;
            }, climDown = function() {
                return this.data.moving = !0, this.data.fallRate = 0, this.data.jumpRate = this.data.jumpForce, this.data.action = "climb", this.data.event.jump = !1, this.data.event.fall = !1, this.data.y = this.data.y + 1, this.data.onLand = !1, this.counter++, this.data.event.climb = !0, !1;
            }, fall = function() {
                return !this.data.onLand && this.data.event.climb && (this.data.event.fall = !0), !1;
            }, collideData, data, x = this.data.tileX, y = this.data.tileY, current = map.events(x, y), above = map.events(x, y - 1), below = map.events(x, y + 1);
            
return input.keys.up === !0 ? (this.data.event.jump || this.data.event.fall) && !this.data.event.climb ? climbUp.call(this) : find(current, "ladder") && !find(above, "ladder") ? climbUp.call(this) : find(current, "ladder") && find(above, "ladder") ? climbUp.call(this) : !find(current, "ladder") && find(below, "ladder") && this.data.event.climb ? climbUp.call(this) : !find(current, "ladder") && !find(above, "ladder") ? fall.call(this) : fall.call(this) : input.keys.down === !0 ? find(current, "wall") && find(current, "ladder") && find(below, "ladder") ? climDown.call(this) : !find(current, "ladder") && find(below, "ladder") ? climDown.call(this) : find(current, "ladder") && find(below, "ladder") ? climDown.call(this) : find(current, "ladder") && !find(below, "ladder") ? fall.call(this) : fall.call(this) : input.keys.space && fall.call(this), !1;
        },
        parseTilePosition: function() {
            var round = function(number) {
                var num = Math.round(number / 32);
                
return num;
            }, speed = this.animations[this.data.action].speed, counter = this.counter, index = Math.floor(counter / speed);
            if (index > this.animations[this.data.action].frames.length - 1 || speed === 0) index = 0, this.counter = 0;
            return this.data.frameData = this.animations[this.data.action].frames[index], this.data.tileX = round(this.data.x - this.data.frameData.cpx), this.data.tileY = round(this.data.y - this.data.frameData.cpy), !1;
        },
        action: function(target, context, map) {
            if (this.data.coolDown) return !1;
            var find = function(list, type) {
                if (list) for (var i = 0; i < list.length; i++) {
                    !list[i];
                    if (list[i].event.indexOf(type) > -1) return list[i];
                }
                return !1;
            }, collideData, data, current, below, x = this.data.tileX, y = this.data.tileY;
            return current = map.events(x, y), below = map.events
(x, y + 1), find(current, "door") ? this.on.door.call(this, target, {
                x: x,
                y: y,
                door: find(current, "door"),
                map: map
            }) : find(current, "ladder") || find(below, "ladder") ? this.on.climb.call(this, target, context, map) : this.data.direction.left ? (x -= 1, collideData = map.events(x, y), data = find(collideData, "door"), data && data.event === "door" && this.on.door.call(this, target, {
                x: x,
                y: y,
                map: map
            })) : (x += 1, collideData = map.events(x, y), data = find(collideData, "door"), data && data.event === "door" && this.on.door.call(this, target, {
                x: x,
                y: y,
                map: map
            })), !1;
        },
        moveMap: function(target) {
            return this.data.x < target.world.data.minOffset ? target.world.data.offsetX = target.world.data.minOffset : this.data.x + target.world.data.minOffset > 
target.world.data.maxOffsetX ? target.world.data.offsetX = target.world.data.maxOffsetX - target.world.data.minOffset : target.world.data.offsetX = this.data.x, this.data.y < target.world.data.minOffset ? target.world.data.offsetY = target.world.data.minOffset : this.data.y + target.world.data.minOffset > target.world.data.maxOffsetY ? target.world.data.offsetY = target.world.data.maxOffsetY - target.world.data.minOffset : target.world.data.offsetY = this.data.y, !1;
        },
        jump: function(target, event) {
            return !input.keys.space || this.data.jumpRate >= 0 ? (this.data.event.jump = !1, this.data.event.fall = !0) : (this.data.moving = !0, this.data.event.jump === !1, this.data.onLand = !1, this.data.action = "jump", this.data.event.jump = !0, this.data.y += Math.floor(2 * this.data.jumpRate), this.data.jumpRate += target.world.data.gravity), !1;
        },
        fall: function(target, event) {
            return this.data.moving = !0, this.data.action = "fall", 
this.data.event.fall = !0, this.data.event.jump = !1, this.data.y += Math.floor(2 * this.data.fallRate), this.data.fallRate += target.world.data.gravity, !1;
        },
        land: function(target, event) {
            return this.data.action = "land", this.data.onLand = !0, this.data.event.jump = !1, this.data.event.fall = !1, this.data.event.climb = !1, this.data.fallRate = 0, this.data.jumpRate = this.data.jumpForce, !1;
        },
        animate: function(target, context, map) {
            this.data.moving = !1;
            if (this.data.travel) return this.on.moveDoors.call(this, map), this.on.resetCollisions.call(this, context), this.on.moveMap.call(this, target, context), !1;
            if (!input.keys.left || !input.keys.right) if (input.keys.left || input.keys.right) input.keys.left && (this.data.lastDirection = "left"), input.keys.right && (this.data.lastDirection = "right"), this.data.action = "walk";
            this.data.direction.left = this.data.lastDirection === "left"
, this.data.direction.right = this.data.lastDirection === "right", (this.data.event.action || input.keys.up || input.keys.down) && this.data.event.climb === !1 && this.on.action.call(this, target, context, map), this.data.event.fall || !this.data.onLand && !this.data.event.climb && !this.data.event.jump ? this.on.fall.call(this, target, context) : this.data.event.climb ? this.on.climb.call(this, target, context, map) : (this.data.event.jump || input.keys.space) && this.on.jump.call(this, target, context), (this.data.event.walk || input.keys.left || input.keys.right) && this.on.walk.call(this, target, context), this.animations[this.data.action].speed > 0 && this.data.event.climb === !1 && this.counter++;
            var speed = this.animations[this.data.action].speed, index = Math.floor(this.counter / speed);
            if (index > this.animations[this.data.action].frames.length - 1 || speed === 0) index = 0, this.counter = 0;
            var frameData = this.data.frameData = this.animations
[this.data.action].frames[index];
            return this.data.direction.left === !0 ? (this.data.isFlipped || (context.save(), context.scale(-1, 1), context.translate(-context.canvas.width, 0), this.data.isFlipped = !0), context.drawImage(this.image, frameData.x, frameData.y, frameData.w, frameData.h, context.canvas.width - map.offset(this.data.x - frameData.cpx, "X") - frameData.w, map.offset(this.data.y - frameData.cpy, "Y"), frameData.w, frameData.h)) : context.drawImage(this.image, frameData.x, frameData.y, frameData.w, frameData.h, map.offset(this.data.x - frameData.cpx, "X"), map.offset(this.data.y - frameData.cpy, "Y"), frameData.w, frameData.h), this.on.resetCollisions.call(this, context), this.on.moveMap.call(this, target, context), !1;
        },
        collideBottom: function(target) {
            return this.data.event.fall && (this.data.y = target.y * 32 - 13, this.on.land.call(this)), this.data.onLand = !0, this.data.blocked.down = !0, !1;
        },
        collideTop: 
function(target) {
            return this.data.event.jump && (this.data.event.jump = !1, this.data.event.fall = !0, this.data.action = "fall"), this.data.blocked.up = !0, !1;
        },
        collideRight: function(target) {
            return this.data.action = "stand", this.data.event.walk = !1, this.data.event.stand = !0, this.data.blocked.right = !0, !1;
        },
        collideLeft: function(target) {
            return this.data.action = "stand", this.data.event.walk = !1, this.data.event.stand = !0, this.data.blocked.left = !0, !1;
        },
        resetCollisions: function(context) {
            return this.data.action = "stand", this.data.onLand = !1, this.data.blocked.left = !1, this.data.blocked.right = !1, this.data.blocked.up = !1, this.data.blocked.down = !1, this.data.isFlipped && (context.restore(), this.data.isFlipped = !1), this.data.coolDown > 0 && this.data.coolDown--, this.data.coolDown < 0 && (this.data.coolDown = 0), this.on.parseTilePosition.call(this), !1
;
        }
    };
}), define("/data/animations/dummy.js", [], function() {
    return {
        stand: {
            speed: 0,
            frames: [ {
                x: 4,
                y: 1,
                w: 34,
                h: 39,
                cpx: 18,
                cpy: 19
            } ]
        },
        walk: {
            speed: 5,
            frames: [ {
                x: 6,
                y: 44,
                w: 30,
                h: 39,
                cpx: 18,
                cpy: 19
            }, {
                x: 45,
                y: 44,
                w: 32,
                h: 38,
                cpx: 18,
                cpy: 19
            }, {
                x: 86,
                y: 43,
                w: 37,
                h: 39,
                cpx: 18,
                cpy: 19
            }, {
                x: 127,
                y: 44,
                w: 39,
                h: 37,
                cpx: 18,
                cpy: 19
            
}, {
                x: 176,
                y: 44,
                w: 32,
                h: 37,
                cpx: 18,
                cpy: 19
            }, {
                x: 221,
                y: 45,
                w: 24,
                h: 36,
                cpx: 18,
                cpy: 19
            }, {
                x: 261,
                y: 44,
                w: 28,
                h: 37,
                cpx: 18,
                cpy: 19
            }, {
                x: 298,
                y: 43,
                w: 34,
                h: 38,
                cpx: 18,
                cpy: 19
            }, {
                x: 340,
                y: 44,
                w: 34,
                h: 38,
                cpx: 18,
                cpy: 19
            }, {
                x: 380,
                y: 45,
                w: 38,
                h: 37,
                cpx: 18,
                cpy: 19
            }, {
                x: 424,
                y: 45
,
                w: 34,
                h: 37,
                cpx: 18,
                cpy: 19
            } ]
        },
        jump: {
            speed: 0,
            frames: [ {
                x: 424,
                y: 45,
                w: 34,
                h: 37,
                cpx: 18,
                cpy: 19
            } ]
        },
        fall: {
            speed: 0,
            frames: [ {
                x: 298,
                y: 43,
                w: 34,
                h: 38,
                cpx: 18,
                cpy: 19
            } ]
        },
        land: {
            speed: 0,
            frames: [ {
                x: 86,
                y: 43,
                w: 37,
                h: 39,
                cpx: 18,
                cpy: 19
            } ]
        }
    };
}), define("/data/data/dummy.js", [], function() {
    return {
        health: 100,
        x: 480,
        y: 288,
        w: 32,
        h: 32,
        id: "dummy",
        direction
: {
            up: !1,
            right: !1,
            down: !1,
            left: !1
        },
        event: {
            jump: !1,
            fall: !0,
            walk: !1,
            dash: !1
        },
        frameData: null,
        jumpRate: -3,
        moving: !1,
        jumpForce: -3,
        fallRate: 0,
        isFlipped: !1,
        physics: {
            checkAgainst: [ "map" ],
            types: [ "entity" ]
        },
        oldFrame: {
            animation: "",
            index: 0
        }
    };
}), define("/data/events/dummy.js", [ "animation", "input", "map" ], function(animation, input, map) {
    return {
        walk: function(target, event) {
            var collide = this.on.collision.call(this, target, event);
            if (collide.triggers.indexOf("left") > -1 || collide.triggers.indexOf("right") > -1) event = collide.event;
            return !input.keys.left && !input.keys.right && (this.data.event.walk = !1, this.data.event.stand = !0), (!input
.keys.left || !input.keys.right) && this.data.event.walk && collide.triggers.indexOf("left") === -1 && collide.triggers.indexOf("right") === -1, input.keys.right === !1 && this.data.direction.right === !0, input.keys.left === !1 && this.data.direction.left === !0, event;
        },
        dash: function(target, event) {
            return event;
        },
        stand: function(target, event) {
            return event;
        },
        jump: function(target, event) {
            event = this.on.walk.call(this, target, event);
            var collide = this.on.collision.call(this, target, event);
            return collide.triggers.indexOf("top") > -1 || this.data.jumpRate >= 0 ? (this.data.event.jump = !1, event = collide.event, this.on.fall.call(this, target, event)) : (this.data.fallRate = 0, event.action = "jump", this.data.event.jump = !0, this.data.y += Math.floor(2 * this.data.jumpRate), this.data.jumpRate += target.world.data.gravity, !input.keys.space), event;
        },
        
fall: function(target, event) {
            event = this.on.walk.call(this, target, event);
            var collide = this.on.collision.call(this, target, event);
            return collide.triggers.indexOf("bottom") > -1 ? (this.data.event.fall = !1, event = collide.event, this.on.land.call(this, target, event)) : (this.data.jumpRate = this.data.jumpForce, event.action = "fall", this.data.event.fall = !0, this.data.y += Math.floor(2 * this.data.fallRate), this.data.fallRate += target.world.data.gravity), event;
        },
        land: function(target, event) {
            return this.data.event.jump = !1, this.data.event.fall = !1, this.data.fallRate = 0, this.data.jumpRate = this.data.jumpForce, event;
        },
        crouch: function(target, event) {},
        destroy: function(target, event) {
            var oldFrame = null;
            this.data.oldFrame.animation !== "" && (oldFrame = this.animations[this.data.oldFrame.animation].frames[this.data.oldFrame.index]), this.data.direction
.left === !0 ? (this.data.isFlipped || (event.context.save(), event.context.scale(-1, 1), event.context.translate(-animation.canvas.width, 0), this.data.isFlipped = !0), oldFrame !== null && event.context.clearRect(animation.canvas.width - (this.data.oldFrame.x - oldFrame.cpx) - oldFrame.w - 3, this.data.oldFrame.y - oldFrame.cpy - 3, oldFrame.w + 3, oldFrame.h + 3)) : (this.data.isFlipped && (event.context.restore(), this.data.isFlipped = !1), oldFrame !== null && event.context.clearRect(this.data.oldFrame.x - oldFrame.cpx - 3, this.data.oldFrame.y - oldFrame.cpy - 3, oldFrame.w + 3, oldFrame.h + 3));
        },
        animate: function(target, event) {
            var motionType = {
                action: "stand",
                move: !1
            };
            this.data.event.fall ? motionType = this.on.fall.call(this, target, motionType) : this.data.event.jump ? motionType = this.on.jump.call(this, target, motionType) : this.data.event.walk && (motionType = this.on.walk.call(this
, target, motionType)), this.animations[motionType.action].speed > 0 && this.counter++;
            var speed = this.animations[motionType.action].speed, counter = this.counter, index = Math.floor(counter / speed);
            if (index > this.animations[motionType.action].frames.length - 1 || speed === 0) index = 0, this.counter = 0;
            var oldFrame = null;
            this.data.oldFrame.animation !== "" && (oldFrame = this.animations[this.data.oldFrame.animation].frames[this.data.oldFrame.index]);
            var frameData = this.data.frameData = this.animations[motionType.action].frames[index];
            this.data.direction.left === !0 ? (this.data.isFlipped || (event.context.save(), event.context.scale(-1, 1), event.context.translate(-animation.canvas.width, 0), this.data.isFlipped = !0), event.context.drawImage(this.image, frameData.x, frameData.y, frameData.w, frameData.h, animation.canvas.width - (this.data.x - frameData.cpx) - frameData.w, this.data.y - frameData.cpy, 
frameData.w, frameData.h)) : event.context.drawImage(this.image, frameData.x, frameData.y, frameData.w, frameData.h, this.data.x - frameData.cpx, this.data.y - frameData.cpy, frameData.w, frameData.h), this.data.isFlipped && (event.context.restore(), this.data.isFlipped = !1), this.data.oldFrame.index = index, this.data.oldFrame.animation = motionType.action, this.data.oldFrame.x = this.data.x, this.data.oldFrame.y = this.data.y;
        },
        collision: function(target, event) {
            var result = {
                triggers: [],
                event: event
            }, round = function(number) {
                var num = Math.round(number / 32) - 1;
                return num < 0 && (num = 0), num;
            }, sx = this.data.x, sy = this.data.y, ex = this.data.x + this.data.w, ey = this.data.y + this.data.h, mx = (sx + ex) / 2, my = (sy + ey) / 2, collideData = map.collide(round(sx), round(my));
            if (sx <= 0 || collideData.passable === !1) result.triggers.push
("left"), result.event.action = "stand", this.data.event.walk = !1, this.data.event.stand = !0;
            collideData = map.collide(round(ex), round(my));
            if (ex >= animation.canvas.width || collideData.passable === !1) result.triggers.push("right"), result.event.action = "stand", this.data.event.walk = !1, this.data.event.stand = !0;
            collideData = map.collide(round(mx), round(sy));
            if (sy <= 0 || collideData.passable === !1) result.triggers.push("top"), this.data.event.jump && (this.data.event.jump = !1, this.data.event.fall = !0, result.event.action = "fall");
            collideData = map.collide(round(mx), round(ey));
            if (ey >= animation.canvas.height || collideData.passable === !1) result.triggers.push("bottom"), this.data.event.fall && (this.data.event.jump = !1, this.data.event.fall = !1, result.event.action = "land");
            return result;
        }
    };
}), define("/data/animations/block.js", [], function() {
    return {
        
idle: {
            speed: 0,
            frames: [ {
                x: 0,
                y: 96,
                w: 64,
                h: 64,
                cpx: 32,
                cpy: 32
            } ]
        }
    };
}), define("/data/data/block.js", [], function() {
    return {
        health: 100,
        x: 448,
        y: 96,
        tileX: 14,
        tileY: 3,
        w: 64,
        h: 64,
        id: "block",
        action: "idle",
        fallRate: 0,
        passable: !1,
        frameData: null,
        onLand: !1,
        moveSpeed: 1,
        direction: {
            right: !1,
            left: !1
        },
        event: {
            fall: !0,
            move: !1
        },
        moving: !1,
        blocked: {
            up: !1,
            down: !1,
            right: !1,
            left: !1
        },
        physics: {
            checkAgainst: [ "map" ],
            types: [ "entity", "block" ]
        },
        event: {
            fall: !0
        
}
    };
}), define("/data/events/block.js", [ "animation", "input", "map" ], function(animation, input, map) {
    return {
        animate: function(target, event) {
            (this.data.event.fall || !this.data.onLand) && this.on.fall.call(this, target, event), this.data.event.move && this.on.move.call(this, target, event), animation.context.drawImage(this.image, this.data.frameData.x, this.data.frameData.y, this.data.frameData.w, this.data.frameData.h, this.data.x - this.data.frameData.cpx, this.data.y - this.data.frameData.cpy, this.data.w, this.data.h), this.on.resetCollisions.call(this);
        },
        move: function(target, event) {
            this.data.direction.right === !0 && this.data.blocked.right === !1 ? this.data.x = this.data.x + this.data.moveSpeed : this.data.direction.left === !0 && this.data.blocked.left === !1 && (this.data.x = this.data.x - this.data.moveSpeed);
        },
        fall: function(target, event) {
            this.data.event.fall = !0, this.data
.y += Math.floor(2 * this.data.fallRate), this.data.fallRate += target.world.data.gravity;
        },
        land: function(target, event) {
            this.data.onLand = !0, this.data.event.fall = !1, this.data.fallRate = 0;
        },
        collideBottom: function(target) {
            this.data.event.fall && (this.data.y = target.y * 32 - 32, this.on.land.call(this)), this.data.onLand = !0, this.data.blocked.down = !0;
        },
        collideTop: function(target) {
            this.data.blocked.up = !0;
        },
        collideRight: function(target) {
            this.data.event.move = !0, this.data.direction.left = !0, this.data.blocked.right = !0;
        },
        collideLeft: function(target) {
            this.data.event.move = !0, this.data.direction.right = !0, this.data.blocked.left = !0;
        },
        parseTilePosition: function() {
            var round = function(number) {
                var num = Math.round(number / 32);
                return num;
            
}, speed = this.animations[this.data.action].speed, counter = this.counter, index = Math.floor(counter / speed);
            if (index > this.animations[this.data.action].frames.length - 1 || speed === 0) index = 0, this.counter = 0;
            this.data.frameData = this.animations[this.data.action].frames[index], this.data.tileX = round(this.data.x - this.data.frameData.cpx), this.data.tileY = round(this.data.y - this.data.frameData.cpy);
        },
        resetCollisions: function() {
            this.data.action = "idle", this.data.onLand = !1, this.data.direction.left = !1, this.data.direction.right = !1, this.data.blocked.left = !1, this.data.blocked.right = !1, this.data.blocked.up = !1, this.data.blocked.down = !1, this.data.isFlipped && (animation.context.restore(), this.data.isFlipped = !1), this.on.parseTilePosition.call(this);
        }
    };
}), define("/data/master.js", [ "entity", "/data/data/world.js", "/data/animations/playertest.js", "/data/data/player.js", "/data/events/player.js"
, "/data/animations/dummy.js", "/data/data/dummy.js", "/data/events/dummy.js", "/data/animations/block.js", "/data/data/block.js", "/data/events/block.js" ], function(entity, world, playerAnimation, playerData, playerEvents, dummyanimation, dummydata, dummyevents, blockAnimation, blockData, blockEvents) {
    var master = {
        characters: {},
        tiles: {},
        objects: {},
        tools: {},
        environment: {}
    };
    return entity.make(master, "/images/tiles.png", "characters", blockAnimation, blockData, blockEvents), entity.make(master, "/images/playertest.png", "characters", playerAnimation, playerData, playerEvents), entity.make(master, "/images/mmz.png", "characters", dummyanimation, dummydata, dummyevents), entity.make(master, null, "environment", null, world, null), master;
}), define("map", [ "/data/maps/test.js", "/data/maps/moarmaps.js", "animation", "/data/master.js" ], function(test, moarmaps, animation, master) {
    return {
        maps: {
            
test: test,
            moarmaps: moarmaps
        },
        world: master.environment.world.data,
        offsetX: -1,
        offsetY: -1,
        xList: [],
        yList: [],
        minOffset: master.environment.world.data.minOffset,
        maxOffsetX: master.environment.world.data.maxOffsetX,
        maxOffsetY: master.environment.world.data.maxOffsetY,
        currentMap: null,
        sheetImage: null,
        drawnMap: !1,
        buildMap: function(name) {
            return this.currentMap = this.maps[name], this.sheetImage = new Image, this.sheetImage.src = this.currentMap.tilesets[0].image, this.maxOffsetX = master.environment.world.data.maxOffsetX = this.currentMap.width * 32, this.maxOffsetY = master.environment.world.data.maxOffsetY = this.currentMap.width * 32, !1;
        },
        animate: function(animation) {
            var thisLayer, l, x, y, tileId, width, tile, thisY, thisX, length = this.currentMap.layers.length;
            if (this.offsetX !== this.world.offsetX || 
this.offsetY !== this.world.offsetY) this.offsetX = this.world.offsetX, this.offsetY = this.world.offsetY, this.xList = this.roundBetween(this.offsetX - this.minOffset, this.offsetX + this.minOffset, !0), this.yList = this.roundBetween(this.offsetY - this.minOffset, this.offsetY + this.minOffset, !0), this.drawnMap = !1;
            if (this.drawnMap === !1) {
                for (l = 0; l < length; l++) {
                    thisLayer = this.currentMap.layers[l];
                    if (thisLayer.name !== "event") {
                        animation.setup(thisLayer.name), width = thisLayer.width;
                        for (x = -1; x < this.xList.length; x++) {
                            thisX = this.xList[x + 1];
                            for (y = -1; y < this.yList.length; y++) thisY = this.yList[y + 1], typeof thisLayer.data[width * thisY + thisX] == "number" && (tileId = thisLayer.data[width * thisY + thisX] - 1, tileId !== -1 && (tile = this.currentMap.tilesets[0].tileproperties
[tileId], animation.context.drawImage(this.sheetImage, this.currentMap.tileheight * tile.x, this.currentMap.tileheight * tile.y, this.currentMap.tileheight, this.currentMap.tileheight, this.currentMap.tileheight * (x + 1) - this.remainder(this.offsetX), this.currentMap.tileheight * (y + 1) - this.remainder(this.offsetY), this.currentMap.tileheight, this.currentMap.tileheight)));
                        }
                    }
                }
                this.drawnMap = !0;
            }
            return !1;
        },
        remainder: function(number) {
            return number % 32;
        },
        offset: function(number, position) {
            return number - (this["offset" + position] - this.minOffset);
        },
        roundBetween: function(start, end, map) {
            var round = function(number) {
                var num = Math.floor(number / 32);
                return num < 0 && (num = 0), num;
            };
            if (start % 32 === 0 && !map) return [ 
round(start) ];
            var roundedStart = round(start), roundedEnd = round(end), numbers = [];
            for (var i = roundedStart; i < roundedEnd; i++) numbers.push(i);
            return numbers.push(roundedEnd), numbers;
        },
        tileList0: [],
        tileList1: [],
        tileList2: [],
        tileList3: [],
        tileListIndex: 0,
        getTiles: function(xList, yList, debug) {
            var index = this.tileListIndex, results = this["tileList" + index];
            results.length && (results.length = 0);
            var length = this.currentMap.layers.length;
            for (l = 0; l < length; l++) {
                var thisLayer = this.currentMap.layers[l], width = thisLayer.width;
                for (var x = 0; x < xList.length; x++) {
                    var thisX = xList[x];
                    for (var y = 0; y < yList.length; y++) {
                        var thisY = yList[y], tileId = thisLayer.data[width * thisY + thisX] - 1, tiles = this.currentMap
.tilesets[0].tileproperties;
                        tileId === -1 ? results.push(!1) : results.push(tiles[tileId].passable === "false");
                    }
                }
            }
            return this.tileListIndex++, this.tileListIndex > 3 && (this.tileListIndex = 0), results;
        },
        eventDataList0: [],
        eventDataList1: [],
        eventDataList2: [],
        eventDataListIndex: 0,
        events: function(x, y) {
            var index = this.eventDataListIndex, results = this["eventDataList" + index];
            results.length && (results.length = 0);
            var length = this.currentMap.layers.length;
            for (l = 0; l < length; l++) {
                var thisLayer = this.currentMap.layers[l];
                if (thisLayer.name === "event") {
                    var width = thisLayer.width, tileId = thisLayer.data[width * y + x] - 1;
                    if (tileId !== -1) {
                        var tiles = this.currentMap.tilesets[0].
tileproperties;
                        results[index] ? results[index] = tiles[tileId] : results.push(tiles[tileId]);
                    }
                }
            }
            return this.eventDataListIndex++, this.eventDataListIndex > 2 && (this.eventDataListIndex = 0), results;
        },
        xy: {
            x: 0,
            y: 0
        },
        matchDoor: function(originX, originY) {
            var thisLayer, l, x, y, tileId, width, height, tile, searchTile, xy;
            xy = this.xy;
            var length = this.currentMap.layers.length;
            for (l = 0; l < length; l++) {
                thisLayer = this.currentMap.layers[l];
                if (thisLayer.name === "event") {
                    width = thisLayer.width, height = thisLayer.height, searchTile = thisLayer.data[width * originY + originX] - 1;
                    for (y = 0; y < height; y++) for (x = 0; x < width; x++) {
                        tileId = thisLayer.data[width * y + x] - 1;
                        
if (tileId !== -1 && tileId === searchTile && (originX !== x || originY !== y)) return xy.x = x, xy.y = y, xy;
                    }
                }
            }
            return xy.x = originX, xy.y = originY, xy;
        }
    };
}), define("physics", [ "map" ], function(map) {
    var contains = function(item, content) {
        return item.indexOf(content) > -1;
    }, round = function(number) {
        var num = Math.floor(number / 32);
        return num < 0 && (num = 0), num;
    }, mapCollision = function(x, y) {
        var results = !1, length = map.currentMap.layers.length;
        for (l = 0; l < length; l++) {
            var thisLayer = map.currentMap.layers[l], width = thisLayer.width, tileId = thisLayer.data[width * round(y) + round(x)] - 1;
            if (tileId !== -1) {
                var tiles = map.currentMap.tilesets[0].tileproperties;
                tiles[tileId].passable === "false" && (results = tiles[tileId]);
            }
        }
        return results
;
    };
    return function Physics(entity, renderList) {
        var checkAgainst = entity.data.physics.checkAgainst, types = entity.data.physics.types;
        if (entity.data.physics.checkAgainst.length > 0) {
            var sx = entity.data.x - entity.data.frameData.cpx, sy = entity.data.y - entity.data.frameData.cpy, ex = sx + entity.data.w, ey = sy + entity.data.h, mx = (sx + ex) / 2, my = (sy + ey) / 2, modifier = 0, tsx, tsy, tex, tey;
            if (contains(checkAgainst, "map")) {
                modifier = 0, entity.data.event.walk && entity.data.direction.left && (modifier = entity.data.walkSpeed);
                var left = map.getTiles([ round(sx - modifier) ], map.roundBetween(sy, ey));
                (sx + modifier <= 0 || left.indexOf(!0) > -1) && entity.on.collideLeft.call(entity, {
                    x: round(sx + modifier)
                }), modifier = 0, entity.data.event.walk && entity.data.direction.right && (modifier = entity.data.walkSpeed);
                
var right = map.getTiles([ round(ex + modifier) ], map.roundBetween(sy, ey));
                (ex + modifier >= map.currentMap.width * 32 || right.indexOf(!0) > -1) && entity.on.collideRight.call(entity, {
                    x: round(ex + modifier)
                }), modifier = 0, entity.data.event.jump && (modifier = Math.floor(2 * entity.data.jumpRate));
                var top = map.getTiles(map.roundBetween(sx, ex), [ round(sy + modifier) ]);
                (sy + modifier <= 0 || top.indexOf(!0) > -1) && entity.on.collideTop.call(entity, {
                    y: round(sy + modifier)
                }), modifier = 0, entity.data.event.fall && (modifier = Math.floor(2 * entity.data.fallRate));
                var bottom = map.getTiles(map.roundBetween(sx, ex), [ round(ey + modifier) ]);
                (ey + modifier >= map.currentMap.height * 32 || bottom.indexOf(!0) > -1) && entity.on.collideBottom.call(entity, {
                    y: round(ey + modifier)
                });
            
}
            if (contains(checkAgainst, "entity")) for (var i = 0; i < renderList.length; i++) {
                var target = renderList[i];
                if (target.data.uniqueId !== entity.data.uniqueId && contains(target.data.physics.types, "entity")) var tsx = target.data.x - target.data.frameData.cpx, tsy = target.data.y - target.data.frameData.cpy, tex = tsx + target.data.w, tey = tsy + target.data.h, tmx = (tsx + tex) / 2, tmy = (tsy + tey) / 2;
            }
        }
        return !1;
    };
}), define("animation", [ "physics", "map" ], function(physics, map) {
    return function() {
        var lastTime = 0, vendors = [ "ms", "moz", "webkit", "o" ];
        for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) window.requestAnimationFrame = window[vendors[x] + "RequestAnimationFrame"], window.cancelAnimationFrame = window[vendors[x] + "CancelAnimationFrame"] || window[vendors[x] + "CancelRequestAnimationFrame"];
        window.requestAnimationFrame || 
(window.requestAnimationFrame = function(callback, element) {
            var currTime = (new Date).getTime(), timeToCall = Math.max(0, 16 - (currTime - lastTime)), id = window.setTimeout(function() {
                callback(currTime + timeToCall);
            }, timeToCall);
            return lastTime = currTime + timeToCall, id;
        }), window.cancelAnimationFrame || (window.cancelAnimationFrame = function(id) {
            clearTimeout(id);
        });
    }(), {
        canvas: {},
        context: {},
        renderList: [],
        mainLoop: null,
        startLoop: function(fn) {
            return fn();
        },
        stopLoop: function(id) {
            return cancelAnimationFrame(id), !1;
        },
        setup: function(id) {
            return this.canvas = document.getElementById(id), this.context = this.canvas.getContext("2d"), this.context.clearRect(0, 0, this.canvas.width, this.canvas.height), !1;
        },
        animationLoop: function(map, master) {
            
var length = this.renderList.length, thisEntity;
            this.setup("objects");
            for (var i = 0; i < length; i++) {
                var thisEntity = this.renderList[i];
                thisEntity.remove ? (thisEntity.on.destroy.call(thisEntity, null, null), this.renderList.splice(i), length = this.renderList.length, i--) : (physics(thisEntity, this.renderList), thisEntity.data.id === "player" ? (this.setup("player"), thisEntity.on.animate.call(thisEntity, master.environment, this.context, map), this.setup("objects")) : thisEntity.on.animate.call(thisEntity, master.environment, this.context, map));
            }
            return map.animate(this), !1;
        }
    };
}), require([ "animation", "input", "entity", "map", "/data/master.js" ], function(animation, input, entity, map, master) {
    input.listen("keydown", function() {
        input.keyDown(event, input);
    }), input.listen("keyup", function() {
        input.keyUp(event, input);
    });
    function randomFromTo
(from, to) {
        return Math.floor(Math.random() * (to - from + 1) + from);
    }
    map.buildMap("test"), entity.spawn(master.characters.player, {}, animation.renderList);
    var beginRender = function() {
        return animation.animationLoop.call(animation, map, master), requestAnimationFrame(beginRender);
    };
    animation.mainLoop = beginRender();
}), define("main", function() {});